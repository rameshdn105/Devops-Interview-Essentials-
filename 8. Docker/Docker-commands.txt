Docker Commands:

1. $$ docker –version    : This command is used to get the currently installed version of docker
2. $$ docker ps : list the running containers
3. $$ docker ps -a : show all the running and exited containers
4. $$ docker container ls -s : to view approximate size of a running container
3. $$ docker pull <image name>	:This command is used to pull images from the docker repository(hub.docker.com)
4. docker build: To create a image from dockerfile
   $$ docker build -t <imagename>:<tag> <path of the Dockerfile>
10. docker commit: To create a image from a existing container
   $$ docker commit <container id> <imagename>:<tag>
5. docker run: This command is used to run a container from an image
   $$ docker run -it -d <image name>:tag
6. docker attach: get into container /login to container
   $$ docker attach <container id>
7. docker exec: used to access/login the running container (in order to run in the session of bin bash )
   $$ docker exec -it <container ID> /bin/bash
8. docker stop: stops a running container
   $$ docker stop <container id>
9. docker kill: This command kills the container by stopping its execution immediately
   $$ docker kill <container id>
10.docker rm: to remove/delete a stopped container
   $$ docker rm <containerid>  (forcefully *docker rm -f <containerid>)
   $$ docker rm $(docker stop <contaner id>)

10.docker login: login to the docker hub repository
   $$ docker tag <local-image>:<tag> <hub_username>/<reponame>:<tag>   --->before pushing the image we need to tag the image properly
   
   $$ docker build -t <imagename>:<tag> <path of the Dockerfile>
   $$ docker push <hub_username>/<repo_name>:<tag>		(login required)

 $$ docker push $DOCKER_REGISTRY_USERNAME/simple-python-flask-app:latest		(login required)

-> docker pull centos/alpine/wordpress/archlinux
-> pulling images for centos (installing centos) from docker image registry(called docker hub), to create and run a container
* $$ docker stop <containerID>
* $$ docker start <containerID>
* $$ docker stats <containerID> 
* $$ docker inspect <containerID>: 
* docker info   : it gives the information of the docker, like no of containers, kernel version, kernal name
* flags -p: assign port target
        -d: detached mode
        -v: attach volume
        -q: quit
        -f: filter 

11.$$ docker images: lists all the locally stored docker images
12.docker rmi: to delete an image from local storage
   $$ docker rmi <image-id>
   $$ docker image rm <imagename>:tag  Ex:nginx:alpine

13.$$ docker volume create <volume name>---> to create docker volumes
14.$$ docker volume ls --->list all the volumes
15.$$ docker volume rm <volume name> ----> to delete docker volume
16.$$ docker volume prune   ----> delete unused volumes
17.$$ docker volume inspect <volume name> ---> to display the details about volume
18.$$ docker run -v <volume name>:<continaer path>  --> attaching volume
   $$ docker run -it -v vol1:/root/vol1 --name <image name> ubuntu   : mount container to the volume, or attach container to volume

19.$$ docker network create --driver bridge <network_name>   --->create a custom bridge network
20.$$ docker run -dti --network <network_name><imagename:tag>  --->create a container in the custom bridge
21.Connect containers present in diff bridge
   $$ docker network connect <network_name> <container id>
   $$ docker network disconnect <network_name> <container id>
22.$$ docker run -d -it --network host <imagename:tag>   -->running a host network
23.To create an overlay network for use with swarm services: 
   $$ docker network create -d overlay my-overlay
   -> To create an overlay network which can be used by swarm services or standalone containers to communicate with other standalone containers running on other Docker daemons, add the --attachable flag:
   $$ docker network create -d overlay --attachable my-attachable-overlay

24.to publish a single port 
   $$ docker run -p <hostport>:<container_port> .....
   to publish all the available exposed port of the container 
   $$ docker run -P ..............
25.container logs: for retrieving container logs
  $$ sudo docker container logs [option] container_id
26.container logs: all logs of a docker container
  $$ docker ps -q | xargs -L 1 docker logs
27.docker memory: To limit the maximum amount of memory usage for a container, add the --memory/-m
  $$ sudo docker run -it --memory=" [memory_limit]" [docker_image]

28. Docker compose commands
docker compose up -d :to start docker compose file
docker compose logs-->to check logs generated by the compose
docker compose pause--->If you want to pause the environment execution without changing the current state of your containers
               unpause
docker compose stop--->The stop command will terminate the container execution, but it won’t destroy any data associated with your containers
docker compose down--->If you want to remove the containers, networks, and volumes associated with this containerized environment, use the down command