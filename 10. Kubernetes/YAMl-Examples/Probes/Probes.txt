In Kubernetes, liveness probes, readiness probes, and startup probes are used to monitor the health of Pods and determine whether they are running properly. These probes are configured within the Pod specification and help ensure that your application is working correctly by performing checks on the running containers.

Hereâ€™s a breakdown of each probe, what it does, and how to define them in a Pod's configuration.

1. Liveness Probe
The liveness probe checks if your application is still alive and running. If the liveness probe fails, Kubernetes will automatically restart the container.

2. Readiness Probe
The readiness probe checks if your application is ready to serve traffic. If the readiness probe fails, the Pod will be removed from the service's endpoints until it is ready again.

3. Startup Probe
The startup probe is used to check if the application within the container has started properly. If the startup probe fails, the container will be restarted. This probe is particularly useful for applications that have a long initialization period.

Explanation of Each Probe's Properties:
Liveness Probe:
httpGet: Defines the HTTP request that will be sent to the container for the health check. You can use other types such as tcpSocket or exec based on your needs.
path: The HTTP path to check.
port: The port to check the health on.
initialDelaySeconds: How long to wait before starting to check the liveness (i.e., after the container starts).
periodSeconds: How often to perform the health check.
timeoutSeconds: The number of seconds to wait for a response from the probe before considering it failed.
successThreshold: The number of successful probe responses required to be considered successful.
failureThreshold: The number of failed attempts before the container is restarted.
Readiness Probe:
httpGet: Defines the HTTP request that will be sent to the container to check if it's ready to serve traffic.
initialDelaySeconds: The time to wait after the container starts before the first readiness check.
periodSeconds: How frequently to check the readiness status.
timeoutSeconds: The number of seconds the probe will wait for a response.
successThreshold: The number of successful checks required for the Pod to be considered "ready."
failureThreshold: The number of failed checks after which the Pod will be marked as "not ready."
Startup Probe:
httpGet: Similar to the liveness and readiness probes, but used for startup checking. Can be replaced with exec or tcpSocket.
initialDelaySeconds: The initial delay to wait before starting the probe after the container starts.
periodSeconds: How frequently to check the startup status.
timeoutSeconds: The number of seconds to wait for the response.
failureThreshold: The number of failures that will trigger a restart of the container.
