Link: https://sharonsahadevan.medium.com/kubernetes-secret-management-a-comprehensive-guide-with-aws-secrets-manager-bdebbd70d7b1

Manage Kubernetes Secrets using AWS Secrets Manager:
====================================================

-> To enable Kubernetes to access AWS Secrets Manager, we‚Äôll use the Secrets Store CSI Driver.

-> Secrets Store CSI (Container Storage Interface) Driver is a special kind of CSI driver that lets Kubernetes mount secrets directly into Pods as volumes, at runtime, from external secret managers (AWS Secrets Manager, Azure Key Vault, etc.).

üîë What Purposes Can "Secrets Store CSI Driver (Secrets CSI)" Serve in Kubernetes?
Use Case					                         Example
Inject AWS Secrets Manager secrets	Database credentials, API keys
Inject Azure Key Vault secrets	   	Certificates, connection strings
Inject HashiCorp Vault secrets		  PKI certs, dynamic secrets
Mount secrets as volumes	          Mounted files available in Pods
Automatic secret rotation		       Auto-rotate secrets without redeploying Pods
‚úÖ Secrets Store CSI Driver supports AWS, Azure, GCP, Vault via providers.

‚öôÔ∏è Secrets Store CSI Driver + AWS Provider Fetch Secret Automatically
‚û°Ô∏è What happens under the hood?
1. Secrets Store CSI driver sees Pod needs a secret via secretProviderClass.
2. It calls AWS Secrets Manager using the IAM Role associated via Service Account (secrets-store-sa).
3. It retrieves the secret (JSON with username/password).
4. It mounts secret data as files under /mnt/secrets/.

 
‚úÖ Steps to Retrieve AWS Secrets Manager Secret via Secrets Store CSI and Mount to Pod
---------------------------------------------------------------------------------------
-> By using the "Secrets Manager CSI Driver and the Secret Provider Class", we can simplify the process of accessing secrets stored in AWS Secrets Manager and improve the security of our Kubernetes applications.

Pre requisites:
---------------
** Kubernetes Cluster running (EKS or other K8s).
** IAM Role or Service Account with access to AWS Secrets Manager.
** Kubectl is configured to work with your k8s/EKS cluster
** Helm v3 is installed in your local machine
** AWS CLI is configured to execute commands
** Secrets Store CSI Driver installed on your cluster.

1. Install "Secrets Store CSI Driver" Deployment:
-------------------------------------------------
-> To deploy the CSI driver using Helm, run the following commands:

$$ helm repo add secrets-store-csi-driver https://kubernetes-sigs.github.io/secrets-store-csi-driver/charts
$$ helm --install csi-secrets-store secrets-store-csi-driver/secrets-store-csi-driver --namespace kube-system --set syncSecret.enabled=true --set enableSecretRotation=true

-> This installs the Secrets Store CSI driver into kube-system namespace.

-> When you deploy the "Secrets Store CSI Driver" using Helm, you can enable Kubernetes secrets sync and secret rotation. 
-> By default, these features are disabled, but you can enable them to automatically create the secret object in the Kubernetes cluster using the secrets manager secrets.
-> Enabling Kubernetes secrets sync and secret rotation allows you to automatically update the Kubernetes secret object with the latest secret value from AWS Secrets Manager, which helps to ensure that your Kubernetes applications always have access to the most up-to-date secret value.

Feature				                  Helm Parameter
Sync as Kubernetes secret	    syncSecret.enabled=true
Secret Auto rotation		      enableSecretRotation=true

-> Verify the installation:
$$ kubectl get daemonsets -n kube-system -l app.kubernetes.io/instance=csi-secrets-store


2. "Secrets Manager CSI driver Provider" Deployment:
--------------------------------------------------
-> To enable Kubernetes to retrieve secrets from AWS Secrets Manager, you must deploy the Secrets Manager CSI provider for AWS.
-> Simply can run the following commands to deploy the provider:

$$ helm repo add aws-secrets-manager https://aws.github.io/secrets-store-csi-driver-provider-aws
$$ helm --install -n kube-system secrets-provider-aws aws-secrets-manager/secrets-store-csi-driver-provider-aws --namespace kube-system

-> Verify the installation:
$$ kubectl get daemonsets -n kube-system -l app=secrets-store-csi-driver-provider-aws


3. Create a test Secret in Secrets Manager:
-------------------------------------------
a. You must create a secret in Secrets Manager within the same region as your EKS cluster.
b. After creating the test secret, make note of the secret‚Äôs ARN or name, which will be used in the Secret Provider Class manifest. 
c. The ARN or name uniquely identifies the secret and allows the Kubernetes service account to retrieve the required secrets from AWS Secrets Manager.

4. Create IAM role for the service account:
-------------------------------------------
-> To allow the Kubernetes "Service account" to retrieve secrets from AWS Secrets Manager, an IAM role with the necessary permissions must be created. 
-> To create an IAM role, navigate to the AWS console and search for the IAM service. Then, under IAM, click on Roles.

-> The trust entity type should be set to ‚Äúweb identity‚Äù when creating the role. Next, select the EKS cluster OIDC provider from the drop-down menu and specify the audience as ‚Äústs.amazonaws.com.‚Äù

-> This will allow the Kubernetes service account to assume the IAM role and access the required secrets from AWS Secrets Manager. By creating an IAM role with the appropriate permissions, you can ensure that Kubernetes applications can securely access the data they need to operate.

{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret"
            ],
            "Resource": [
                "<arn of your secret>"
            ]
        }
    ]
}

-> After creating the IAM role for the service account, it‚Äôs essential to note the IAM role ARN, as this will be used to annotate the service account. The IAM role ARN uniquely identifies the role and grants the service account the necessary permissions to access the secrets stored in AWS Secrets Manager.

-> By annotating the service account with the IAM role ARN, Kubernetes is granted permission to assume the role and retrieve the required secrets. This helps to ensure that sensitive information is kept private and secure while allowing Kubernetes applications to access the data they need to operate.


5. Create Service Account:
==========================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: secrets-manager-access-sa
  namespace: example # Your prefered namespace
  annotations:
    eks.amazonaws.com/role-arn: < Your IAM Role ARN >

-> A service account must be annotated with the IAM role ARN to allow pods to retrieve secrets from AWS Secrets Manager. By annotating the service account with the IAM role ARN, Kubernetes is granted permission to access the IAM role, which can then be used to retrieve secrets from AWS Secrets Manager.


6. Create a secret provider class:
==================================
-> This object tells Secrets Store CSI what secret to fetch and how.
-> The "Secret Provider Class" custom resource definition (CRD) retrieves secrets from AWS Secrets Manager and creates Kubernetes Secret objects. 

-> The Secret Provider Class defines a Kubernetes object that maps to a secret stored in AWS Secrets Manager. 
-> Once the mapping is established, the Secret Provider Class retrieves the secret from AWS Secrets Manager and creates a Kubernetes Secret object, which the application can use.


7. Create Nginx Deployment:
===========================
-> A simple Nginx deployment can be used to demonstrate how to mount secrets in a Kubernetes Deployment from AWS Secrets Manager. 
-> The deployment will use the Secret Provider Class to create a Kubernetes object that maps to a secret stored in AWS Secrets Manager. 

-> The secrets will be mounted as a volume mount in the container to ensure the Nginx container can read the secret values. 
-> In addition, the mounted secrets will be available as a file in the container‚Äôs file system at /mnt/secrets-store. 
-> By mounting the secrets as a volume, the application can easily read and use the secret values as needed.

spec:
  serviceAccountName: secrets-store-sa
volumes:
  - name: secrets-store-inline
    csi:
      driver: secrets-store.csi.k8s.io
      readOnly: true
      volumeAttributes:
        secretProviderClass: "aws-secrets"


==================================================================================================================
‚úÖ Step-by-Step to exec into Pod and check Secrets
1. Find your Pod name (if you don't already know it)
$$ kubectl get pods

2. Exec into the Pod (interactive shell)
$$ kubectl exec -it secret-pod -- /bin/sh
-> If /bin/sh doesn't work (depending on image), you can try /bin/bash.

3. Navigate to the mounted secret path
‚û°Ô∏è If you mounted your secret at /mnt/secrets (as per example):
cd /mnt/secrets

4. List the files present (should correspond to secret keys)
$$ ls -l

Example output if you fetched username and apiKey:
-r--r--r-- 1 root root  6 Mar 13 12:00 my-username
-r--r--r-- 1 root root 32 Mar 13 12:00 my-api-key

5. Read the secret value (optional)
$$ cat my-username








