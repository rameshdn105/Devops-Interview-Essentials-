✅ SecurityContext in Kubernetes — Quick Guide
-> Security Contexts configure Pods and Containers at runtime. 
-> Security contexts are defined as part of the Pod and container specifications in the Pod manifest, and represent parameters to the container runtime.

-> A security context defines privilege and access control settings for a Pod or Container. 
-> Security context settings include, but are not limited to:

👉 Discretionary Access Control: Permission to access an object, like a file, is based on user ID (UID) and group ID (GID).
👉 Security Enhanced Linux (SELinux): Objects are assigned security labels.
👉 Running as privileged or unprivileged.
👉 Linux Capabilities: Give a process some privileges, but not all the privileges of the root user.
👉 AppArmor: Use program profiles to restrict the capabilities of individual programs.
👉 Seccomp: Filter a process's system calls.
👉 allowPrivilegeEscalation: Controls whether a process can gain more privileges than its parent process. This bool directly controls whether the no_new_privs flag gets set on the container process. allowPrivilegeEscalation is always true when the container:
	👉 is run as privileged, or
	👉 has CAP_SYS_ADMIN
👉 readOnlyRootFilesystem: Mounts the container's root filesystem as read-only.


🔑 What is SecurityContext?
-> SecurityContext defines security settings for Pods and containers, including:
-- User/Group IDs to run as.
-- Filesystem permissions.
-- Privilege control.
-- Linux capabilities.

🔐 SecurityContext at Two Levels:
1. Pod-level: Affects all containers in the pod.
2. Container-level: Affects individual container, overrides Pod-level if set.

📄 Key Fields in SecurityContext
runAsUser: Run container as this UID — Example: runAsUser: 1000
runAsGroup: GID for the container — Example: runAsGroup: 3000
runAsNonRoot: Ensure the container runs as non-root — Example: runAsNonRoot: true
fsGroup: GID for shared volume access — Example: fsGroup: 2000
privileged: Run in privileged mode (root access) — Example: privileged: false
readOnlyRootFilesystem: Make root filesystem read-only — Example: readOnlyRootFilesystem: true
allowPrivilegeEscalation: Prevent privilege escalation — Example: allowPrivilegeEscalation: false
capabilities: Add/drop Linux capabilities — Example: capabilities: { drop: ["ALL"] }

🔐 Best Practices:
Always use runAsNonRoot: true when possible.
Set readOnlyRootFilesystem: true for immutable filesystem.
Drop all unnecessary capabilities (drop: ["ALL"]).
Avoid privileged containers unless absolutely required.
Use PodSecurityPolicies (deprecated, replaced by OPA/Gatekeeper/PSA) to enforce security policies.

🚨 Important SecurityContext for Production:
User & Group: runAsUser, runAsGroup.
Root FS Protection: readOnlyRootFilesystem.
Capability Control: capabilities.
Privilege Restriction: allowPrivilegeEscalation, privileged.