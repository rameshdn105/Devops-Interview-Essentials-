
Service accounts are commonly used for:
-> Allowing Pods to authenticate with Kubernetes APIs.
-> Granting permissions to Pods for specific actions in the cluster.
-> Enabling fine-grained access control through RBAC (Role-Based Access Control).

Key Concepts

Service Account:
-> Represents an identity for processes inside a Pod.
-> Used for authentication when Pods make API requests.
-> Automatically linked to Pods in the namespace by default.


Default Service Account:
-> Every namespace in Kubernetes has a default service account.
-> If you don’t specify a service account for a Pod, Kubernetes assigns it to the default service account for that namespace.

Service Account Token:
-> A service account has a token associated with it that is mounted inside the Pod by default. 
-> This token is used to authenticate requests from the Pod to the Kubernetes API.

Role-Based Access Control (RBAC):
-> Service accounts are used with RBAC to control what actions a Pod can perform in the cluster. 
-> You can associate a service account with a specific Role or ClusterRole and then bind those roles to the service account using RoleBinding or ClusterRoleBinding.

-> Creating a Service Account
You can create a service account using a simple YAML file or kubectl command.

1. Create a Service Account using YAML
$$ kubectl apply -f service-account.yaml

2. kubectl create serviceaccount my-service-account
$$ kubectl create serviceaccount my-service-account


**  Roles and Permissions to a Service Account
Once you have a service account, you need to give it the appropriate permissions. You can use Roles and RoleBindings (for namespace-specific permissions) or ClusterRoles and ClusterRoleBindings (for cluster-wide permissions).

Example: Create a Role and RoleBinding
Let's say you want to allow the service account to access Pods in the default namespace.

Create a Role: role.yaml
-- This role allows reading Pods in the default namespace.

2. Create a RoleBinding to associate the service account with the pod-reader role:
$$ kubectl apply -f role.yaml
$$ kubectl apply -f rolebinding.yaml

Using the Service Account in a Pod
To use the service account in a Pod, you specify the service account name in the Pod's YAML definition. If you don’t specify a service account, the Pod will use the default service account.

Example: Pod Using a Service Account
In this example, the Pod my-pod uses the my-service-account service account. This allows it to use the token associated with the service account to authenticate API requests.

Default Service Account Behavior
If you don't specify a serviceAccountName in the Pod definition, Kubernetes automatically assigns the default service account in the Pod's namespace.

For example, the following YAML will use the default service account:
By default:

A service account token is automatically mounted at /var/run/secrets/kubernetes.io/serviceaccount/ inside the Pod.
The token can be used to authenticate API requests made by processes inside the Pod.


Service Account Token
When a Pod is associated with a service account, Kubernetes automatically mounts a token to the Pod. This token is stored at the following location:

$$ /var/run/secrets/kubernetes.io/serviceaccount/token

The token allows Pods to authenticate against the Kubernetes API server. This is used by tools like kubectl, or if your application inside the container needs to interact with the Kubernetes API.

Example of Pod Accessing the Kubernetes API Using Service Account Token
If you need to make an API request from within your application, you can use the service account token and the CA certificate mounted by default.

For example, you can access the Kubernetes API from a Pod like this:
curl --header "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
     --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
     https://kubernetes.default.svc/api

