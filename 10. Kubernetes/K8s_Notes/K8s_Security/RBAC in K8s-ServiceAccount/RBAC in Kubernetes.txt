-> RBAC (Role-Based Access Control) is a Kubernetes mechanism that regulates access to resources based on the roles assigned to users, groups, or service accounts.

üëâ It allows fine-grained control over:

-> Who (user, group, service account)
-> Can perform what actions (verbs like get, list, create, delete)
-> On which resources (pods, deployments, secrets, etc.)
-> In which namespace (or cluster-wide)

üîê 1. Use Authentication & Authorization
a. Authentication
-> Enable strong authentication for all clients (kubectl, CI/CD, apps).
-> Use X.509 client certificates, OIDC tokens, or Service Account tokens

-> Example: Use --client-ca-file flag to provide a CA bundle for verifying client certificates.
# Example API server flag
--client-ca-file=/etc/kubernetes/pki/ca.crt

b. Authorization
-> Use RBAC (Role-Based Access Control) to define what authenticated users can do.
-> Avoid using overly broad permissions (e.g., cluster-admin).
Example:
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: default
  name: pod-reader
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "watch", "list"]

  
üîë Key Components of RBAC
Component	Description
Role	       Set of permissions (verbs on resources) within a namespace
ClusterRole	    Set of permissions cluster-wide, or across all namespaces
RoleBinding	    Assigns a Role to a user/group/service account within a namespace
ClusterRoleBinding	Assigns a ClusterRole to a user/group/service account cluster-wide

üîπ 1. Role (Namespace-Scoped)
-> Defines permissions within a specific namespace.

üîπ 2. ClusterRole (Cluster-Scoped)
-> Defines permissions across all namespaces or cluster-scoped resources (like nodes, persistent volumes).

üîπ 3. RoleBinding (Namespace-Specific Binding)
-> Binds a Role (or even ClusterRole) to a user/group/service account within a namespace.

üîπ 4. ClusterRoleBinding (Cluster-Wide Binding)
-> Binds a ClusterRole to a user/group/service account for cluster-wide access.

‚úÖ How RBAC Works ‚Äî Flow
1. User/ServiceAccount sends request to API server (e.g., list pods).
2. Authentication: Kubernetes authenticates the identity (e.g., certificate, token).
3. Authorization (RBAC): Kubernetes checks RBAC rules to determine if the action is allowed.
4. Decision: Permit or deny the request.

üöÄ Common Verbs in RBAC Rules
Verb	Action
get	    Read a specific resource
list	List all resources of a type
watch	Watch for changes
create	Create new resource
update	Modify an existing resource
patch	Partially update a resource
delete	Delete a resource

‚úÖ Common Resources in RBAC Rules
Resource	Description
pods	    Pods
deployments	Deployments
services	Services
configmaps	Configuration data
secrets	    Sensitive data
nodes	    Cluster nodes (ClusterRole)
persistentvolumes	Persistent Volumes (ClusterRole)

‚ö†Ô∏è Security Best Practices for RBAC
1. Principle of Least Privilege: Grant only the permissions required.
2. Avoid ClusterRoleBinding unless necessary: Prefer Role + RoleBinding for namespace-level access.
3. Use separate service accounts for apps with different access needs.
4. Regularly review RBAC policies to avoid over-permissioning.
5. Restrict access to secrets and sensitive resources.