1. What is AWS CloudFormation?
-> AWS CloudFormation is an Infrastructure-as-Code (IaC) service that allows users to define AWS resources using YAML or JSON templates. It automates the provisioning and management of AWS infrastructure.

Why Use CloudFormation?
âœ… Automates Infrastructure Deployment â€“ No manual setup.
âœ… Ensures Consistency â€“ Avoids configuration drift.
âœ… Supports Infrastructure as Code (IaC) â€“ Version control infrastructure.
âœ… Manages Dependencies â€“ Automatically creates resources in the right order.
âœ… Rollback Support â€“ Restores previous states if deployment fails.

CloudFormation CLI & AWS CLI Commands:
1. Validate Template: CloudFormation template syntax is correct
$$ aws cloudformation validate-template --template-body file://ec2-instance.yaml

2. Create a Stack: Deploy the stack
$$ aws cloudformation create-stack --stack-name MyEC2Stack --template-body file://ec2-instance.yaml

2.1 Check Stack Creation Status:
$$ aws cloudformation describe-stacks --stack-name MyEC2Stack
or
$$ aws cloudformation list-stacks --stack-status-filter CREATE_IN_PROGRESS

2.2 List All Resources Created by the Stack
$$ aws cloudformation list-stack-resources --stack-name MyEC2Stack

3. Update a Stack:
$$ aws cloudformation update-stack --stack-name myStack --template-body file://template.yaml

4. Delete a Stack:
$$ aws cloudformation delete-stack --stack-name myStack

5. Create a Change Set (Preview Changes Before Applying)
$$ aws cloudformation create-change-set --stack-name MyEC2Stack \
  --template-body file://ec2-instance.yaml \
  --change-set-name MyChangeSet

To view the changes:
$$ aws cloudformation describe-change-set --change-set-name MyChangeSet --stack-name MyEC2Stack

6. Rollback Stack in Case of Failure: If the update fails, rollback to the last successful state:
$$ aws cloudformation rollback-stack --stack-name MyEC2Stack

7. Monitor Stack Deletion
$$ aws cloudformation describe-stacks --stack-name MyEC2Stack

------------------------------------------------------------------------
Additional CloudFormation Commands

1. List All Stacks: $$ aws cloudformation list-stacks
2. List Only Active Stacks: $$ aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE
3. Describe a Specific Stack: $$ aws cloudformation describe-stacks --stack-name MyEC2Stack
4. Get Stack Events (To Debug Issues): $$ aws cloudformation describe-stack-events --stack-name MyEC2Stack
5. Describe Stack Resources: $$ aws cloudformation list-stack-resources --stack-name MyEC2Stack
6. Export Stack Output Values: If your template has outputs, list them:
$$ aws cloudformation describe-stacks --stack-name MyEC2Stack --query "Stacks[0].Outputs"
7. Cancel a Stack Update in Progress: $$ aws cloudformation cancel-update-stack --stack-name MyEC2Stack
8. Enable Stack Termination Protection: Prevent accidental stack deletion:
$$ aws cloudformation update-termination-protection --stack-name MyEC2Stack --enable-termination-protection
9. Disable Stack Termination Protection: $$ aws cloudformation update-termination-protection --stack-name MyEC2Stack --no-enable-termination-protection

----------------------------------------------------------------------------------------
2. CloudFormation Template Structure
-> A CloudFormation template consists of multiple sections:

a) AWSTemplateFormatVersion (Optional): Defines the CloudFormation version being used.
AWSTemplateFormatVersion: "2010-09-09"

b) Description (Optional): A short explanation of what the template does.
Description: "Creates an S3 bucket for logging purposes."

c) Metadata (Optional): Provides additional information about the template.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "S3 Bucket Settings"
        Parameters:
          - BucketName

d) Parameters: Defines dynamic values that users can pass when deploying a stack.
Parameters:
  BucketName:
    Type: String
    Description: "The name of the S3 bucket"

e) Mappings: Used for static lookup tables, like region-specific AMIs.
Mappings:
  RegionMap:
    us-east-1:
      AMI: "ami-123456"
    us-west-1:
      AMI: "ami-654321"

f) Conditions: Defines when resources should be created.
Conditions:
  CreateProdResources: !Equals [!Ref EnvType, "Production"]

g) Resources (Mandatory): Defines AWS services to be created.
Resources:
  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-12345678

h) Outputs: Returns useful information after deployment.
Outputs:
  BucketName:
    Value: !Ref MyS3Bucket


---------------------------------------------------------------------------------------
3. CloudFormation Deployment Workflow
1. Write a CloudFormation template.
2. Validate the template using AWS CLI or Console.
3. Create a stack using the CloudFormation template.
4. Monitor stack creation in the AWS Console.
5. Use Change Sets for updates without downtime.
6. Delete the stack if no longer needed.

----------------------------------------------------------------------------------
4. CloudFormation Resource Management
a) Stacks: 
-- A stack is a collection of AWS resources managed as a unit.
-- You can update, delete, or roll back a stack as needed.

b) StackSets: 
-- StackSets allow deploying CloudFormation stacks across multiple AWS accounts and regions.

c) Change Sets:
-- Before updating a stack, Change Sets provide a preview of modifications.

d) Drift Detection:
-- Detects manual changes to infrastructure that were not made via CloudFormation.


--------------------------------------------------------------------------------------
5. Advanced CloudFormation Features

a) Nested Stacks: Nested stacks allow modularization by splitting large templates into smaller ones.

Example:
Resources:
  NetworkStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: "https://s3.amazonaws.com/my-bucket/network-template.yaml"


b) Cross-Stack References: Allows sharing resources between stacks.
-- Producer Stack (exports value):
Outputs:
  VPCID:
    Value: !Ref MyVPC
    Export:
      Name: MyVPC-ID
Consumer Stack (imports value):
Resources:
  MySubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !ImportValue MyVPC-ID


c) Rollback Triggers: Automatically roll back stack updates if specific CloudWatch alarms are triggered.
RollbackConfiguration:
  RollbackTriggers:
    - Arn: arn:aws:cloudwatch:us-east-1:123456789012:alarm/MyAlarm
      Type: "AWS::CloudWatch::Alarm"
  MonitoringTimeInMinutes: 5


---------------------------------------------------------------------------------------
7. Best Practices
âœ… Use YAML over JSON â€“ YAML is more readable.
âœ… Parameterize Templates â€“ Avoid hardcoded values.
âœ… Use Nested Stacks â€“ Break large templates into smaller modules.
âœ… Enable Rollback Triggers â€“ Prevent faulty deployments.
âœ… Monitor Drift Detection â€“ Detect manual infrastructure changes.
âœ… Use Version Control â€“ Store templates in GitHub or AWS CodeCommit.


---------------------------------------------------------------------------------------
** Meta arguments:-
-------------------

a) DeletionPolicy (Equivalent to Terraform's prevent_destroy)
-> Prevents resources from being deleted when a stack is deleted.
-- Options: Retain, Snapshot, Delete.
ðŸ”¹ Example (Retain an S3 bucket after stack deletion)
Resources:
  MyS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
ðŸ”¹ Example (Take a snapshot of an RDS instance before deletion)
Resources:
  MyDB:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot


b) UpdateReplacePolicy (Equivalent to Terraform's create_before_destroy)
-> Controls behavior when a resource needs to be replaced due to updates.
-- Options: Retain, Snapshot, Delete.
ðŸ”¹ Example (Retain an old EBS volume when updating an instance type)
Resources:
  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
    UpdateReplacePolicy: Retain


c) Stack Policies (Equivalent to Terraform's ignore_changes)
-> Prevents certain resources from being updated.
ðŸ”¹ Example (Block accidental updates to a critical IAM Role)
{
  "Statement": [
    {
      "Effect": "Deny",
      "Action": "Update:*",
      "Principal": "*",
      "Resource": "arn:aws:iam::123456789012:role/CriticalRole"
    }
  ]
}
ðŸ”¹ Apply Stack Policy:
$$ aws cloudformation set-stack-policy --stack-name MyStack --stack-policy-body file://policy.json


d) CreationPolicy (Ensures resource is ready before CloudFormation marks it complete)
-> Used for EC2 instances, Auto Scaling Groups.
-- Ensures the instance signals CloudFormation before it moves forward.
ðŸ”¹ Example (EC2 signals CloudFormation after startup)
Resources:
  MyInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-12345678
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M


e) DependsOn (Similar to Terraform's depends_on)
-> Ensures one resource is created before another.
ðŸ”¹ Example (Ensure Security Group is created before EC2 instance)
Resources:
  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH

  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-12345678
      SecurityGroups:
        - !Ref MySecurityGroup
    DependsOn: MySecurityGroup


f) Condition (Equivalent to Terraform's count or for_each)
-> Enables or disables resource creation based on conditions.
ðŸ”¹ Example (Create an EC2 instance only if the environment is "Production")
Conditions:
  IsProd: !Equals [!Ref Env, "Production"]

Resources:
  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
    Condition: IsProd

--------------------------------------------------------------------------------------




















