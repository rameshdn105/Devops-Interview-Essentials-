AWSTemplateFormatVersion: '2010-09-09'
Description: Simple 2-tier architecture with EC2 and RDS

Parameters:
  VpcCIDR:
    Description: VPC CIDR block
    Type: String
    Default: "10.0.0.0/16"
  PublicSubnetCIDR:
    Description: Public subnet CIDR block
    Type: String
    Default: "10.0.1.0/24"
  PrivateSubnetCIDR:
    Description: Private subnet CIDR block
    Type: String
    Default: "10.0.2.0/24"
  DBUsername:
    Description: The database admin username
    Type: String
    NoEcho: true
  DBPassword:
    Description: The database admin password
    Type: String
    NoEcho: true

Resources:
  # VPC
  MyVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: MyVPC

  # Public Subnet
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PublicSubnetCIDR
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: PublicSubnet

  # Private Subnet
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PrivateSubnetCIDR
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: PrivateSubnet

  # Internet Gateway
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: InternetGateway

  # Attach Internet Gateway to VPC
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  # EC2 Instance (Web Server)
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Allow SSH and HTTP'
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: 'tcp'
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'

  WebServerInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      ImageId: 'ami-xxxxxxxxxxxxxxxxx'  # Replace with your preferred AMI ID
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: WebServer

  # RDS Instance (Database Layer)
  DBInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Allow MySQL access from EC2'
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: !Ref PublicSubnetCIDR

  DBInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBName: mydb
      AllocatedStorage: '20'
      DBInstanceClass: db.t2.micro
      Engine: mysql
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      VPCSecurityGroups:
        - !Ref DBInstanceSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      MultiAZ: 'false'
      PubliclyAccessible: 'false'
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: MyDatabase

  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: 'Private subnets for database'
      SubnetIds:
        - !Ref PrivateSubnet
      Tags:
        - Key: Name
          Value: MyDBSubnetGroup

Outputs:
  WebServerPublicIP:
    Description: 'Public IP of the Web Server'
    Value: !GetAtt WebServerInstance.PublicIp
  DBInstanceEndpoint:
    Description: 'Endpoint of the RDS Database'
    Value: !GetAtt DBInstance.Endpoint.Address
